{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/smoothing-path-pid-control","result":{"data":{"markdownRemark":{"html":"<p>It would be awkward if the self-driving car only make a turn at the perfect angle of 90 degree. So, we need a smooth path algorithm.</p>\n<h2>Smoothing Path Algorithm</h2>\n<ol>\n<li><span class=\"math math-inline\">X_i</span> denotes each state</li>\n<li>Set <span class=\"math math-inline\">Y_i = X_i</span></li>\n<li>Optimize <span class=\"math math-inline\">\\min\\ (X_i - Y_i)^2 + \\alpha \\cdot \\min\\ (Y_i - Y_{i+1})^2</span></li>\n<li>Solve it using the gradient descent</li>\n<li>Update <span class=\"math math-inline\">Y_{new} = Y_i + \\alpha(X_i - Y_i) + \\beta(Y_{i+1} - Y_i)</span></li>\n</ol>\n<p>The first portion of the update formula is to make a new path(<span class=\"math math-inline\">Y_i</span>) close to the original path(<span class=\"math math-inline\">X_i</span>). The second portion is to make each point(<span class=\"math math-inline\">Y_i</span>) to close to its next point(<span class=\"math math-inline\">Y_{i+1}</span>).</p>\n<h2>PID Control</h2>\n<p>Assume the car has to drive from (0, 10) to (10, 0) on (X,Y) coordinates world. So, the car should drive down close to the x-axis (y=0). How do we control the steering in order to make y = 0?</p>\n<p>You should measure a CTE(Cross Track Error), and the CTE is the y coordinate of the state in this example.</p>\n<h3>P</h3>\n<p>It stands for \"proportional\"</p>\n<p><span class=\"math math-inline\">\\alpha = - \\tau \\cdot \\text{cte}</span></p>\n<h3>I</h3>\n<p>It stands for \"integral\"\nThere could be a mechanical error in steering.\nSo, if the CTE does not decrease even after long period of time, there needs to be an adjustment in steering.\nSo, we need the integral portion to the steering formula</p>\n<p><span class=\"math math-inline\">\\alpha = - \\tau_p * cte  - \\tau_i \\sum cte</span></p>\n<h3>D</h3>\n<p>It stands for \"differential\"\nWhen there is only \"proportional,\" it will keep overshooting the x-axis and oscillating. So, we need an extra term to adjust the steering and finally reach the marginal stable state.\nWe just need to add a differential term\n<span class=\"math math-inline\">\\alpha = - \\tau_p * cte - \\tau_d \\frac{d}{dt} cte</span>\nwhere <span class=\"math math-inline\">\\frac{d}{dt} cte = \\frac{cte_t - cte_{t-1}}{\\Delta t}</span></p>\n<h2>Summary of PID</h2>\n<p><span class=\"math math-inline\">\\alpha = - \\tau_p cte - \\tau_d \\frac{d}{dt}cte - \\tau_i\\sum cte</span></p>\n<h2>How to find <span class=\"math math-inline\">\\tau</span></h2>\n<p>One question still remains. How are we going to find all these <span class=\"math math-inline\">\\tau</span>.</p>\n<p>The answer is a \"twiddle\" algorithm a.k.a \"coordinate ascent.\"</p>\n<p>Here is the twiddle algorithm.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">init p <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nbest_err <span class=\"token operator\">=</span> run<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.00001</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        err <span class=\"token operator\">=</span> run<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">&lt;</span> best_err<span class=\"token punctuation\">:</span>\n            best_err <span class=\"token operator\">=</span> err\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">1.1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            err <span class=\"token operator\">=</span> run<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> err <span class=\"token operator\">&lt;</span> best_err<span class=\"token punctuation\">:</span>\n                    best_err <span class=\"token operator\">=</span> err\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">1.1</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\"># back to the original value</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">0.9</span></code></pre></div>\n<h2>Summary</h2>\n<ul>\n<li>Learn how to create smooth path from discrete path</li>\n<li>Any robotics requires\n<ul>\n<li>Planner</li>\n<li>Smoother</li>\n<li>Controller (where PID control kicks in)</li>\n</ul>\n</li>\n</ul>","excerpt":"It would be awkward if the self-driving car only make a turn at the perfect angle of 90 degree. So, we need a smooth path algorithmâ€¦","frontmatter":{"date":"December 23, 2016","title":"Smoothing Path & PID Control","keywords":"python, self driving car","description":null},"fields":{"slug":"posts/smoothing-path-pid-control"}}},"pageContext":{"slug":"posts/smoothing-path-pid-control"}},"staticQueryHashes":[]}