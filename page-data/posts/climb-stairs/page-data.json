{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/posts/climb-stairs",
    "result": {"data":{"markdownRemark":{"html":"<p>n개의 계단을 올라야 한다. 한번에 한칸 혹은 두칸의 계단을 올라갈 수 있다.</p>\n<p>n개의 계단을 오르려면 몇가지 경우의 수가 존재하는가?</p>\n<p>이 문제는 <a href=\"https://leetcode.com/problems/climbing-stairs/description/\">LeetCode</a> 에서 풀 수 있습니다.</p>\n<h2>예제<a id=\"sec-1-1\"></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: 2\nOutput: 2</code></pre></div>\n<p>2개의 계단을 오르는 방법은 2가지가 존재한다.</p>\n<ol>\n<li>1 step + 1 step</li>\n<li>2 steps</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: 3\nOutput: 3</code></pre></div>\n<p>3개의 계단을 오르는 법은 3가지 방법이 존재한다.</p>\n<ul>\n<li>1 step + 2 steps</li>\n<li>2 steps + 1 step</li>\n<li>1 step + 1 step + 1 step</li>\n</ul>\n<h2>해설<a id=\"sec-1-2\"></a></h2>\n<p>거꾸로 생각해보면 쉽다. <code class=\"language-text\">n</code> 번째 계단을 올라설 차례라고 생각해보자. <code class=\"language-text\">n</code> 번째 계단을 올라서기 위해서는</p>\n<ul>\n<li><code class=\"language-text\">n - 1</code> 번째 계단에서 한칸 올라서거나</li>\n<li><code class=\"language-text\">n - 2</code> 번째 계단에서 두칸 올라서는 방법이 있다.</li>\n</ul>\n<p>즉,</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>n개의 계단을 올라가는 방법</mtext></mrow><annotation encoding=\"application/x-tex\">T(n) = \\text{n개의 계단을 올라가는 방법}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">n</span><span class=\"mord hangul_fallback\">개의</span><span class=\"mord\"> </span><span class=\"mord hangul_fallback\">계단을</span><span class=\"mord\"> </span><span class=\"mord hangul_fallback\">올라가는</span><span class=\"mord\"> </span><span class=\"mord hangul_fallback\">방법</span></span></span></span></span></span></p>\n<p>이라면,</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + T(n - 2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>로 간단하게 구할 수 있다.</p>\n<p>즉, 피보나치 수열임을 알 수 있다. 피보나치 수임을 알면 iterative하게 푸는 방법이 가장 효율적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">climb_stairs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"피보나치 수열을 구하는 식과 동일\"\"\"</span>\n\n    a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b\n\n    <span class=\"token keyword\">return</span> a</code></pre></div>\n<p>위 식까지 어떻게 오게 되었는지 생각해보면 <code class=\"language-text\">n</code> 과 <code class=\"language-text\">n - 1</code> 을 담을 변수 2개가 필요하다. 즉, <code class=\"language-text\">a</code> 와 <code class=\"language-text\">b</code> 가 그 역할을 한다.</p>\n<p>위 for loop을 설명하기 위해 우선 표를 그려본다.</p>\n<p>next a 는 현재 <code class=\"language-text\">b</code> 의 값이 들어가게 되고 next b 는 현재 <code class=\"language-text\">a + b</code> 의 값이 된다.</p>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>next a</th>\n<th>next b</th>\n<th>a</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>3</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>5</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>5</td>\n<td>8</td>\n<td>3</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p>따라서 <code class=\"language-text\">n</code> 이 주어지면 <code class=\"language-text\">next a</code> 의 값을 반환하면 정답이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    next_a<span class=\"token punctuation\">,</span> next_b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</code></pre></div>\n<p><code class=\"language-text\">next a</code> 는 값이 들어온 <code class=\"language-text\">a</code> 값이기 때문에 <code class=\"language-text\">a</code> 가 정답이 된다.</p>","excerpt":"n개의 계단을 올라야 한다. 한번에 한칸 혹은 두칸의 계단을 올라갈 수 있다. n개의 계단을 오르려면 몇가지 경우의 수가 존재하는가? 이 문제는 LeetCode 에서 풀 수 있습니다. 예제 2개의 계단을 오르는 방법은 2가지가 존재한다. 1 step…","frontmatter":{"date":"March 14, 2018","title":"Climb stairs","keywords":"Dynamic Programming","description":null},"fields":{"slug":"posts/climb-stairs"}}},"pageContext":{"slug":"posts/climb-stairs"}},
    "staticQueryHashes": []}