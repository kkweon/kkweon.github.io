{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/why-you-want-python-36-over-python-2","result":{"data":{"markdownRemark":{"html":"<p>When I say Python 3, I am referring to Python 3.6 because Python 3.6 is the current latest version as of today. For Python2, of course I'm referring to Python 2.7.x (it's scheduled to discontinue by 2020). But, I'm not talking about the unicode support or integer division or print function difference because you should already know this.</p>\n<h2>F-String</h2>\n<p>In Python 3.6, a new feature called \"F-string\" was introduced.\nThis is so much cleaner(readable) than <code class=\"language-text\">print(&quot;{} is a Friday!&quot;.format(today)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">today <span class=\"token operator\">=</span> <span class=\"token string\">\"2017-06-02\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>today<span class=\"token punctuation\">}</span></span><span class=\"token string\"> is a Friday!\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Number Underscores</h2>\n<p>Have you ever counted the number of digits in your code?\nIn Python3.6, an underscore is allowed to annotate a thousand seperator.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">one_million <span class=\"token operator\">=</span> 1_000_000\none_billion <span class=\"token operator\">=</span> 1_000_000_000</code></pre></div>\n<h2>Variable Annotations</h2>\n<p>Python is a dynamically typed language. It means you don't have to declare a variable type. But, it alsot means you need to create your own way of type-checking. Sometimes, when I use other people' codes, I am so confused when there is no docstring for which parameters that its function requires.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_integers</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Integer is required\"</span>\n    <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2</code></pre></div>\n<p>You can use <code class=\"language-text\">mypy your_python_file.py</code> to do a quick type-check as well.</p>\n<h2>Science Community</h2>\n<p>This is not a feature nor about Python 3.6. But rather it's a statement.\nScience community plays a very important role in Python.</p>\n<p>I believe the science stack of Python's one of the reasons how Python became this popular.</p>\n<p>What people don't know is</p>\n<p>the following great science libraries have already moved to Python 3.\nMost of these libraries have already stopped supporting Python 2.\nIf not, they have stopped adding new features in Python 2.</p>\n<p>Who cares? It's going to discontinue in 2020 anyway.</p>\n<ul>\n<li>iPython</li>\n<li>Jupyter Notebook</li>\n<li>Pandas</li>\n<li>Matplotlib</li>\n<li>Sympy</li>\n<li>CPython</li>\n<li>and <a href=\"http://www.python3statement.org/\">More</a></li>\n</ul>\n<h2>Conclusion</h2>\n<p>I missed many many more important features (such as Lazy Evaluations, Unicode Support, Better Async, Better exception, Better OOP, etc), but I hope you understand why you should stop using Python 2.</p>\n<p>If you have to touch the legacy codebase written in Python2, yes you can use Python2.</p>\n<p>If you start a new project, please do use Python 3.</p>","excerpt":"When I say Python 3, I am referring to Python 3.6 because Python 3.6 is the current latest version as of today. For Python2, of course I'mâ€¦","frontmatter":{"date":"June 02, 2017","title":"Why you want Python 3.6 over Python 2","keywords":null,"description":null},"fields":{"slug":"posts/why-you-want-python-36-over-python-2"}}},"pageContext":{"slug":"posts/why-you-want-python-36-over-python-2"}},"staticQueryHashes":[]}