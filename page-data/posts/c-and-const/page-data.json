{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/posts/c-and-const",
    "result": {"data":{"markdownRemark":{"html":"<h1>const in C++</h1>\n<p>It's mostly found when declaring a variable something like <code class=\"language-text\">const int a = 3;</code>\nHowever, it is a sort of \"promise\" for human being since it will usually not make a difference in the compiled code.</p>\n<p>Just as we can break a \"promise\" sometimes, there is also a workaround to modify <code class=\"language-text\">const</code> variable.</p>\n<h2>const variable</h2>\n<p>It's self-explanatory. We know what it means when we see it.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// illegal</span>\n<span class=\"token comment\">// a = 5;</span></code></pre></div>\n<h2>const with pointer</h2>\n<p>This is when the most confusing part because there are following variations</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>what I would like to think is that <code class=\"language-text\">const</code> decorate something that is in its left. For example,</p>\n<ul>\n<li><code class=\"language-text\">int const *</code> means <code class=\"language-text\">int</code> is constant because <code class=\"language-text\">int</code> is in the left.</li>\n</ul>\n<p>If there is nothing in its left, <code class=\"language-text\">const</code> looks for its right side.</p>\n<ul>\n<li><code class=\"language-text\">const int *</code> means the same as above. <code class=\"language-text\">int</code> is constant not <code class=\"language-text\">int*</code></li>\n</ul>\n<p>Then it's fairly easy.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// int is constant</span>\n<span class=\"token comment\">// content cannot be changed</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ok (can be assigned to another pointer)</span>\na <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// `const` decorate `*`</span>\n<span class=\"token comment\">// pointer cannot be re assigned</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// But, this is ok</span>\n<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// not ok</span>\n<span class=\"token comment\">// a = nullptr;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// `const` decorate `int`</span>\n<span class=\"token comment\">// it's same as `const int* a`</span>\n<span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"const in C++ It's mostly found when declaring a variable something like \nHowever, it is a sort of \"promise\" for human being since it willâ€¦","frontmatter":{"date":"November 12, 2017","title":"C++ and CONST","keywords":null,"description":null},"fields":{"slug":"posts/c-and-const"}}},"pageContext":{"slug":"posts/c-and-const"}},
    "staticQueryHashes": []}