{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/posts/do-not-use-go-like-java",
    "result": {"data":{"markdownRemark":{"html":"<p>I have been using Go in the following way (like Java)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> SomeService <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> someServiceImpl <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewSomeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> SomeService <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>someServiceImpl<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>someServiceImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"some-service\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And from a consumer side, it just refers to the interfaces so that I can swap with a mock struct anytime.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewAnotherService</span><span class=\"token punctuation\">(</span>someService SomeService<span class=\"token punctuation\">)</span> AnotherService <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>anotherServiceImpl<span class=\"token punctuation\">{</span>someService<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// anotherservice_test.go</span>\n<span class=\"token keyword\">type</span> someMockService <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>someMockService<span class=\"token punctuation\">)</span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestAnotherService</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tanotherService <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>anotherServiceImpl<span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>someMockService<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But then the problem occurs when I want to add a new method to <code class=\"language-text\">SomeService</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>type SomeService interface {\n<span class=\"token prefix unchanged\"> </span>  DoSomething() string\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  DoOtherThing()\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>// ...\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> func (*someServiceImpl) DoOtherThing() {\n<span class=\"token prefix inserted\">+</span>  fmt.Println(\"some-service\")\n<span class=\"token prefix inserted\">+</span> }</span></code></pre></div>\n<p>Now I have to refactor everywhere including the test files (e.g., <code class=\"language-text\">anotherservice_test.go</code>)!</p>\n<h2>What should I have done</h2>\n<p>Ok, so what should I have done is</p>\n<ul>\n<li>producers should return a concrete type.</li>\n<li>define interface in the consumer and only define what is used.</li>\n</ul>\n<p>For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// producer.go</span>\n<span class=\"token keyword\">type</span> SomeService <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewSomeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> SomeService <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>SomeService<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s SomeService<span class=\"token punctuation\">)</span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"some-service\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And used in the client/consumer,</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// consumer.go</span>\n<span class=\"token keyword\">type</span> SomethingDoer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewAnotherService</span><span class=\"token punctuation\">(</span>doer SomethingDoer<span class=\"token punctuation\">)</span> AnotherService <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>AnotherService<span class=\"token punctuation\">{</span>doer<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now notice that even if I add a new method to <code class=\"language-text\">SomeService</code>, the consumer is not affected.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> // producer.go\n<span class=\"token prefix unchanged\"> </span> type SomeService struct{}\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> func NewSomeService() SomeService {\n<span class=\"token prefix unchanged\"> </span>   return &amp;SomeService{}\n<span class=\"token prefix unchanged\"> </span> }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> func (s SomeService) DoSomething() string {\n<span class=\"token prefix unchanged\"> </span>   return \"some-service\"\n<span class=\"token prefix unchanged\"> </span> }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> // this change won't affect `consumer.go`\n<span class=\"token prefix inserted\">+</span> func (s SomeService) DoAnotherThing() {\n<span class=\"token prefix inserted\">+</span>   fmt.Println(\"some-service\")\n<span class=\"token prefix inserted\">+</span> }</span></code></pre></div>","excerpt":"I have been using Go in the following way (like Java) And from a consumer side, it just refers to the interfaces so that I can swap with aâ€¦","frontmatter":{"date":"August 19, 2020","title":"Do not use Go like Java","keywords":"go, golang","description":null},"fields":{"slug":"posts/do-not-use-go-like-java"}}},"pageContext":{"slug":"posts/do-not-use-go-like-java"}},
    "staticQueryHashes": []}