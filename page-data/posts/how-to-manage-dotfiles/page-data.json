{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/posts/how-to-manage-dotfiles",
    "result": {"data":{"markdownRemark":{"html":"<p>A few years ago, I learned how to mange dotfiles from\n<a href=\"https://news.ycombinator.com/item?id=11070797\">HN post</a>. It’s amazing, but\nI tend to forget from time to time. So, I am leaving it here</p>\n<h2>When initializing</h2>\n<p>This is the first step to manage your dotfiles. The idea is clever.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init --bare <span class=\"token environment constant\">$HOME</span>/.myconf\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">config</span><span class=\"token operator\">=</span><span class=\"token string\">'/usr/bin/git --git-dir=$HOME/.myconf/ --work-tree=$HOME'</span>\nconfig config status.showUntrackedFiles no</code></pre></div>\n<ol>\n<li>You initialize your home directory as a git repository.</li>\n<li>But your git information is stored in <code class=\"language-text\">$HOME/.myconf</code>. Hence, no\nalias or link is necessary</li>\n</ol>\n<p>Then you manage like normal git repository.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">config status\nconfig <span class=\"token function\">add</span> .vimrc\nconfig commit -m <span class=\"token string\">\"Add vimrc\"</span>\nconfig <span class=\"token function\">add</span> .bashrc\nconfig commit -m <span class=\"token string\">\"Add bashrc\"</span>\nconfig push</code></pre></div>\n<h2>When installing on your new system</h2>\n<p>Make sure you push to your remote server. I used gitlab private.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone --bare <span class=\"token operator\">&lt;</span>git-repo-url<span class=\"token operator\">></span> <span class=\"token environment constant\">$HOME</span>/.myconf\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">config</span><span class=\"token operator\">=</span><span class=\"token string\">'/usr/bin/git --git-dir=$HOME/.myconf/ --work-tree=$HOME'</span>\nconfig checkout</code></pre></div>\n<p>If there is already dotfiles (and there is), there will be conflicts at\ncheckout step. So, move the current files to back up directories.</p>","excerpt":"A few years ago, I learned how to mange dotfiles from\nHN post. It’s amazing, but\nI tend to forget from time to time. So, I am leaving it…","frontmatter":{"date":"December 22, 2017","title":"How to manage dotfiles","keywords":null,"description":null},"fields":{"slug":"posts/how-to-manage-dotfiles"}}},"pageContext":{"slug":"posts/how-to-manage-dotfiles"}},
    "staticQueryHashes": []}