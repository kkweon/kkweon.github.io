{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/how-to-use-a-map-in-reasonml/","result":{"data":{"markdownRemark":{"html":"<h2>Module Functor...</h2>\n<p>In ReasonML, <code class=\"language-text\">Map</code> is a module functor.</p>\n<p>In OCAML,</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"> <span class=\"token keyword\">module</span> IntPairs <span class=\"token operator\">=</span>\n   <span class=\"token keyword\">struct</span>\n     <span class=\"token keyword\">type</span> t <span class=\"token operator\">=</span> int <span class=\"token operator\">*</span> int\n     <span class=\"token keyword\">let</span> compare <span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span>y0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span>y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n       <span class=\"token keyword\">match</span> Pervasives<span class=\"token punctuation\">.</span>compare x0 x1 <span class=\"token keyword\">with</span>\n           <span class=\"token number\">0</span> <span class=\"token operator\">-></span> Pervasives<span class=\"token punctuation\">.</span>compare y0 y1\n         <span class=\"token operator\">|</span> c <span class=\"token operator\">-></span> c\n   <span class=\"token keyword\">end</span>\n\n <span class=\"token keyword\">module</span> PairsMap <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">.</span>Make<span class=\"token punctuation\">(</span>IntPairs<span class=\"token punctuation\">)</span>\n\n <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> PairsMap<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>empty <span class=\"token operator\">|></span> add <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">|></span> add <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Map.Make</code> returns a module. It requires two parameters;</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">module</span> <span class=\"token constructor\">TodoMap</span> <span class=\"token operator\">=</span>\n  <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token constructor\">Make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/** key type */</span>\n    <span class=\"token keyword\">type</span> t <span class=\"token operator\">=</span> int<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** key compare function: compare(key1, key2) */</span>\n    <span class=\"token keyword\">let</span> compare <span class=\"token operator\">=</span> compare<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And then creat an empty map first.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> todoMap<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TodoMap</span><span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">TodoMap</span><span class=\"token punctuation\">.</span>empty</code></pre></div>\n<p>The type signature looks weird but that's how it is..</p>\n<h2>Operations</h2>\n<h3>Add(Update)</h3>\n<p>You can add an item to the map using <code class=\"language-text\">TodoMap.add(id, item, mapInstance)</code>.\nNote that there is no <code class=\"language-text\">TodoMap.update</code>.\nIf there exists the key, it will overwrite.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token class-name\">TodoMap</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> todoItem<span class=\"token punctuation\">,</span> todoMap<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Lookup</h3>\n<p>Use <code class=\"language-text\">TodoMap.find(id, mapInstance)</code>.\nNote that there is no safe method in ReasonML.\nHowever, exception <code class=\"language-text\">Not_found</code> is thrown and it can be pattern matched.</p>\n<p>So, it's going to look as below most of time</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoMap</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>todoMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">|</span> oldTodoItem <span class=\"token operator\">=></span> <span class=\"token comment\">/** do something */</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">exception</span> <span class=\"token constructor\">Not_found</span> <span class=\"token operator\">=></span> <span class=\"token comment\">/** do something */</span></code></pre></div>\n<h3>Remove</h3>\n<p>Nothing special here. Don't forget to wrap with <code class=\"language-text\">switch</code> expression though.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoMap</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>todoMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">|</span> todoMap <span class=\"token operator\">=></span> <span class=\"token class-name\">ReasonReact</span><span class=\"token punctuation\">.</span><span class=\"token constructor\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>todoMap<span class=\"token punctuation\">:</span> todoMap<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">exception</span> <span class=\"token constructor\">Not_found</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">ReasonReact</span><span class=\"token punctuation\">.</span><span class=\"token constructor\">NoUpdate</span></code></pre></div>\n<h3>To List (bindings)</h3>\n<p>In order to use the Map, you probably want <code class=\"language-text\">list('a)</code>.\nAnd, the method is <code class=\"language-text\">TodoMap.bindings(mapInstance)</code> which returns <code class=\"language-text\">list((key, value))</code></p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token comment\">/** Returns list((int, todoItem)) */</span>\n<span class=\"token class-name\">TodoMap</span><span class=\"token punctuation\">.</span>bindings<span class=\"token punctuation\">(</span>todoMap<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://reasonml.github.io/api/Map.html\">https://reasonml.github.io/api/Map.html</a></li>\n</ul>","excerpt":"Module Functor... In ReasonML,  is a module functor. In OCAML,  returns a module. It requires two parameters; And then creat an empty mapâ€¦","frontmatter":{"date":"November 03, 2018","title":"How to use a Map in ReasonML","keywords":"ReasonML","description":null},"fields":{"slug":"posts/how-to-use-a-map-in-reasonml"}}},"pageContext":{"slug":"posts/how-to-use-a-map-in-reasonml"}},"staticQueryHashes":[],"slicesMap":{}}