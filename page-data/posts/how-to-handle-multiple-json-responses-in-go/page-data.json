{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/how-to-handle-multiple-json-responses-in-go","result":{"data":{"markdownRemark":{"html":"<h1>Introduction</h1>\n<p>If your API returns a single type JSON, you can use <a href=\"https://mholt.github.io/json-to-go/\">https://mholt.github.io/json-to-go/</a>. But, it gets tricky if there are multiple structures in the responses. And, it gets even trickier if the embedded structures are different.</p>\n<p>For simplicity, see the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"error_message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"not able to find data\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello world\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see the root structure(<code class=\"language-text\">{ &quot;data&quot;: { ... } }</code>) is the same while the inner objects are different.</p>\n<p>In Go, you can express in the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"encoding/json\"</span>\n\n<span class=\"token comment\">// Root represents the following JSON</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   \"data\": {</span>\n<span class=\"token comment\">//      \"message\": \"...\"</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   \"data\": {</span>\n<span class=\"token comment\">//      \"error_message\": \"...\"</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token keyword\">type</span> Root <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tData DataWrapper <span class=\"token string\">`json:\"data\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> DataWrapper <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tErrorData   <span class=\"token operator\">*</span>ErrorDataType   <span class=\"token string\">`json:\"-\"`</span>\n\tMessageData <span class=\"token operator\">*</span>MessageDataType <span class=\"token string\">`json:\"-\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// UnmarshalJSON will receive either</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 1. ErrorDataType</span>\n<span class=\"token comment\">// ```json</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   \"error_message\": \"error blah blah\"</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// ```</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 2. MessageDataType</span>\n<span class=\"token comment\">// ```json</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   \"message\": \"blah blah\"</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// ```</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>DataWrapper<span class=\"token punctuation\">)</span> <span class=\"token function\">UnmarshalJSON</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> m <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"error_message\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> errorData ErrorDataType\n\t\terr <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>errorData<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t\td<span class=\"token punctuation\">.</span>ErrorData <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>errorData\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> messageData MessageDataType\n\t\terr <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>messageData<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t\td<span class=\"token punctuation\">.</span>MessageData <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>messageData\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ErrorDataType <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tErrorMessage <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"error_message\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> MessageDataType <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tMessage <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"message\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The idea is that I created an wrapper object that only exists in Go.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> DataWrapper <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tErrorData   <span class=\"token operator\">*</span>ErrorDataType   <span class=\"token string\">`json:\"-\"`</span>\n\tMessageData <span class=\"token operator\">*</span>MessageDataType <span class=\"token string\">`json:\"-\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then this struct implements <code class=\"language-text\">UnmarshalJSON</code> method that deals with the sub message portion of the JSON.</p>\n<p>Once we are done, we can simply unmarshal without knowing the implementation details.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestRoot_UnmarshalErrorData</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tinput <span class=\"token operator\">:=</span> <span class=\"token string\">`\n  {\n    \"data\": {\n      \"error_message\": \"this is error_message\"\n    }\n  }\n  `</span>\n\n\t<span class=\"token keyword\">var</span> root Root\n\n\terr <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">NoError</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Nil</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>MessageData<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>ErrorData<span class=\"token punctuation\">.</span>ErrorMessage<span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is error_message\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestRoot_UnmarshalMessageData</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tinput <span class=\"token operator\">:=</span> <span class=\"token string\">`\n  {\n    \"data\": {\n      \"message\": \"this is message\"\n    }\n  }\n  `</span>\n\n\t<span class=\"token keyword\">var</span> root Root\n\n\terr <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">NoError</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Nil</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>ErrorData<span class=\"token punctuation\">)</span>\n\tassert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>MessageData<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is message\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Introduction If your API returns a single type JSON, you can use https://mholt.github.io/json-to-go/. But, it gets tricky if there are…","frontmatter":{"date":"July 08, 2020","title":"How to handle multiple JSON responses in Go","keywords":"go,golang","description":null},"fields":{"slug":"posts/how-to-handle-multiple-json-responses-in-go"}}},"pageContext":{"slug":"posts/how-to-handle-multiple-json-responses-in-go"}},"staticQueryHashes":[]}