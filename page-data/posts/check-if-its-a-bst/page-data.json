{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/posts/check-if-its-a-bst",
    "result": {"data":{"markdownRemark":{"html":"<blockquote>\n<p>Is This a Binary Search Tree?</p>\n</blockquote>\n<p>This problem can be solved in <a href=\"https://www.hackerrank.com/challenges/is-binary-search-tree/problem\">HackerRank</a>.</p>\n<h2>Condition<a id=\"condition\"></a></h2>\n<p>No duplicate in the tree.</p>\n<h2>Solution<a id=\"solution\"></a></h2>\n<p>First, we know the following conditions from the definitions of the BST.</p>\n<ul>\n<li>a left child must be <strong>less</strong> than its parent</li>\n<li>a right child must be <strong>greater</strong> than its parent</li>\n</ul>\n<p>It sounds it can be simply checked using a recursion.</p>\n<p>However, there are two other conditions that must be checked as well.</p>\n<ul>\n<li>We need to ensure that the <strong>right most node</strong> of the <strong>left child</strong> node must be less than its parent.</li>\n<li>Similarly, we need to check the <strong>left most node</strong> of the <strong>right child</strong> node must be greater than its parent.</li>\n</ul>\n<p>First, look at the following image. <img src=\"/66969779ea93d43b814779772881e14c/Binary_search_tree.svg\" alt=\"img\"></p>\n<p>Suppose the current node is the root node which is 8.</p>\n<p>Let's look at the <strong>right most node</strong> of the <strong>left child</strong> (which is 7). If the value is greater than 8, it is clearly not a binary search tree.</p>\n<p>Plus, checking the right most node is good enough because if the parent of the right most node were greater than the root, the right child must be always greater than the root.</p>\n<p>Then the pseudocode can be written as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">checkBST</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> root is null<span class=\"token punctuation\">,</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\n  check left child is less than root\n  check right child is greater than root\n\n  check right most node of left child is less than root\n  check left most node of right child is greater than root\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">checkBST</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">checkBST</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, I am going to define 3 functions <code class=\"language-text\">checkBST</code>, <code class=\"language-text\">findRightMost</code>, and <code class=\"language-text\">findLeftMost</code>.</p>\n<h3>Here is checkBST function.<a id=\"sec-2-1\"></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">checkBST</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// check left is less than root</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>data <span class=\"token operator\">>=</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// check right is greater than root</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;=</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// find right most of the left child</span>\n  <span class=\"token keyword\">auto</span> leftMostRight <span class=\"token operator\">=</span> <span class=\"token function\">findRightMost</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// check if the right most is less than root</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMostRight <span class=\"token operator\">&amp;&amp;</span> leftMostRight<span class=\"token operator\">-></span>data <span class=\"token operator\">>=</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// find left most of the right child</span>\n  <span class=\"token keyword\">auto</span> rightMostLeft <span class=\"token operator\">=</span> <span class=\"token function\">findLeftMost</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// check if the left most is greater than root</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightMostLeft <span class=\"token operator\">&amp;&amp;</span> rightMostLeft<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;=</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// recurse</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">checkBST</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">checkBST</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>findRightMost function<a id=\"sec-2-2\"></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">Node<span class=\"token operator\">*</span> <span class=\"token function\">findRightMost</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>curr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span>\n\n  Node<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> curr <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>findLeftMost function<a id=\"sec-2-3\"></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">Node<span class=\"token operator\">*</span> <span class=\"token function\">findLeftMost</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n\n  Node<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> curr <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Is This a Binary Search Tree? This problem can be solved in HackerRank. Condition No duplicate in the tree. Solution First, we know the…","frontmatter":{"date":"March 12, 2018","title":"Check if it's a BST","keywords":"Algorithms, C++","description":null},"fields":{"slug":"posts/check-if-its-a-bst"}}},"pageContext":{"slug":"posts/check-if-its-a-bst"}},
    "staticQueryHashes": []}