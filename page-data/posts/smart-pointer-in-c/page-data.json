{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/smart-pointer-in-c","result":{"data":{"markdownRemark":{"html":"<h1>What are smart pointers?</h1>\n<ul>\n<li>It is a pointer with automatic memory management</li>\n</ul>\n<p>There are 3 smart pointer types in modern C++17.</p>\n<ul>\n<li>Unique pointer</li>\n<li>Shared pointer</li>\n<li>Weak pointer</li>\n</ul>\n<p>The bread-and-butter ones are <strong>unique pointer</strong> and <strong>shared pointer</strong>.</p>\n<h2>Unique pointer</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n\n<span class=\"token comment\">// (preferred way)</span>\nstd<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> ptr <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// (another way)</span>\nstd<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// when ptr goes out of scope,</span>\n<span class=\"token comment\">// it will be deleted automatically</span></code></pre></div>\n<ul>\n<li>Use <code class=\"language-text\">make_unique&lt;T></code> because it will raise an exception if some goes wrong in constructing <code class=\"language-text\">T</code>.</li>\n</ul>\n<h3>Usage</h3>\n<ul>\n<li>It can be used just like a regular pointer.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">ptr<span class=\"token operator\">-></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Shared pointer</h2>\n<ul>\n<li><code class=\"language-text\">unique_ptr</code> is called <em>unique</em> because there is only one pointer holding the address</li>\n<li>If it needs to be shared, use <code class=\"language-text\">shared_ptr</code></li>\n</ul>\n<p>There is a reference counter internally.</p>\n<p>If one pointer is added to refer the same content, a reference counter increases.\nIf each pointer goes out of scope, a reference counter decreases.</p>\n<p>When there is no reference, its memory will be released.</p>\n<h3>Usage</h3>\n<ul>\n<li>It's same as <code class=\"language-text\">unique_ptr</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> var <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ok</span>\nstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> another <span class=\"token operator\">=</span> var<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Weak pointer</h2>\n<ul>\n<li>It's like a <code class=\"language-text\">shared_ptr</code> but no reference counter is changed.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> var<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> shared <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ok</span>\n  var <span class=\"token operator\">=</span> shared<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// `shared` will be deallocated</span>\n<span class=\"token comment\">// var becomes undefined</span></code></pre></div>","excerpt":"What are smart pointers? It is a pointer with automatic memory management There are 3 smart pointer types in modern C++17. Unique pointerâ€¦","frontmatter":{"date":"November 12, 2017","title":"Smart Pointer in C++","keywords":null,"description":null},"fields":{"slug":"posts/smart-pointer-in-c"}}},"pageContext":{"slug":"posts/smart-pointer-in-c"}},"staticQueryHashes":[]}