{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/posts/reverse-a-linked-list",
    "result": {"data":{"markdownRemark":{"html":"<p>If a Linked List is given as 1 → 2 → 3, it should reverse the list like 3 → 2 → 1.</p>\n<p>You can solve through HackerRank. <a href=\"https://www.hackerrank.com/challenges/reverse-a-linked-list\">https://www.hackerrank.com/challenges/reverse-a-linked-list</a></p>\n<h2>Solution<a id=\"sec-1-1\"></a></h2>\n<h3>First, we define a Node class to define a Linked List.</h3>\n<p>The boilerplate to define a linked list.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;initializer_list></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n  Node <span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">~</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">delete</span> next<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Usage:\n *   createLinkedList({1, 2, 3}) generates the head of a new linked list\n */</span>\nNode <span class=\"token operator\">*</span><span class=\"token function\">createLinkedList</span><span class=\"token punctuation\">(</span>initializer_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> xs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Node <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n  Node <span class=\"token operator\">*</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> xs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      current <span class=\"token operator\">=</span> head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      current<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n      current <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Print the linked list\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">&amp;&amp;</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> head<span class=\"token operator\">-></span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" -> \"</span><span class=\"token punctuation\">;</span>\n    head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> head<span class=\"token operator\">-></span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Actual algorithm.</h3>\n<p>Suppose the following linked list (head) <code class=\"language-text\">1 → 2 → 3</code> is given.</p>\n<p>So, the idea is simple. For each node, connect to its previous node. However, the first node does not have the previous node. Therefore, the first node should link to <code class=\"language-text\">null</code> instead.</p>\n<p>After the current node connects to the previous node, there is no way to reach the next node. So, we need another temporary pointer to hold the next node.</p>\n<p>In C++, it will look as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">Node<span class=\"token operator\">*</span> <span class=\"token function\">reverseLinkedList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    curr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n    curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Recursive</h3>\n<p>We can also define using a recursion though it will be less efficient than the iterative version.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">Node<span class=\"token operator\">*</span> <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// save next node</span>\n  Node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// connect current to the previous node</span>\n  head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// go to next</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"If a Linked List is given as 1 → 2 → 3, it should reverse the list like 3 → 2 → 1. You can solve through HackerRank. https://www.hackerrank…","frontmatter":{"date":"March 09, 2018","title":"Reverse a Linked List","keywords":"Algorithm, C++","description":null},"fields":{"slug":"posts/reverse-a-linked-list"}}},"pageContext":{"slug":"posts/reverse-a-linked-list"}},
    "staticQueryHashes": []}