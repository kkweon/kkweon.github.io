{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/find-a-lonely-integer/","result":{"data":{"markdownRemark":{"html":"<h2>Problem description</h2>\n<p>The problem is the following</p>\n<blockquote>\n<p>Given an array of <code class=\"language-text\">n</code> integers, find and print the unique element.</p>\n</blockquote>\n<p>For example,</p>\n<ul>\n<li>[1] should return 1</li>\n<li>[1, 1, 2] should return 2</li>\n<li>[0, 0, 1, 2, 1] should return 2</li>\n</ul>\n<h3>Condition</h3>\n<p>Every element in the array occurs exactly twice except for one unique element.</p>\n<h3>HackerRank</h3>\n<p>This problem can be solved in <a href=\"https://www.hackerrank.com/challenges/ctci-lonely-integer/problem\">HackerRank</a>.</p>\n<h2>Solution</h2>\n<p>At first, it seems I can use <code class=\"language-text\">Map</code> so that I count how many times the element appears in the list.\nBut, there is a better way. Use the <code class=\"language-text\">XOR</code> operation.</p>\n<p><code class=\"language-text\">XOR</code> operation is represented as <code class=\"language-text\">^</code> such as <code class=\"language-text\">3 ^ 2</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3 = 011 in binary\n2 = 010 in binary\n\n3 ^ 2 = 001 in binary</code></pre></div>\n<p>Therefore, <code class=\"language-text\">3 ^ 2 = 1</code>. Also note that <code class=\"language-text\">same number ^ same number</code> will be always 0.</p>\n<p>With the information, what if we run <code class=\"language-text\">XOR</code> for each element in the array?</p>\n<ol>\n<li>Set MASK = 0</li>\n<li>For each element, a in A</li>\n<li>MASK ^= a</li>\n</ol>\n<p>For example, suppose array is [3, 1, 3]. That is [011, 001, 011] in binary.</p>\n<ul>\n<li>0 ^ 011 = 011</li>\n<li>011 ^ 001 = 010</li>\n<li>010 ^ 011 = 001</li>\n</ul>\n<p>Hence, we can find out that 001 is the number that did not appear twice otherwise it's been canceled out.</p>\n<p>In code,</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">findLonelyInteger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> xs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> mask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> x <span class=\"token operator\">:</span> xs<span class=\"token punctuation\">)</span>\n    mask <span class=\"token operator\">^=</span> x<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> mask<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Problem description The problem is the following Given an array of  integers, find and print the unique element. For example, [1] shouldâ€¦","frontmatter":{"date":"March 11, 2018","title":"Find a lonely integer","keywords":"Algorithm, C++","description":null},"fields":{"slug":"posts/find-a-lonely-integer"}}},"pageContext":{"slug":"posts/find-a-lonely-integer"}},"staticQueryHashes":[],"slicesMap":{}}